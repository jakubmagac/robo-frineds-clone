{"version":3,"sources":["Card.js","Cardlist.js","Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","character","image","name","className","src","alt","Cardlist","characters","map","Searchbar","searchChange","type","onChange","App","onSearchChange","event","setState","searchbar","target","value","state","fetch","then","response","json","data","results","this","filteredChar","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sNAeeA,G,MAbF,SAACC,GAAW,IAAD,EACIA,EAAMC,UAAtBC,EADY,EACZA,MAAOC,EADK,EACLA,KACf,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKH,EAAOI,IAAKH,IACtB,4BAAKA,MCQFI,EAZE,SAACP,GAAW,IACjBQ,EAAeR,EAAfQ,WACR,OACI,yBAAKJ,UAAU,WACVI,EAAWC,KAAI,SAAAR,GAAS,OAAI,kBAAC,EAAD,CAAMA,UAAWA,SCO3CS,EAZG,SAACV,GAAW,IAClBW,EAAiBX,EAAjBW,aACR,OACI,yBAAKP,UAAU,WACX,2BAAOQ,KAAK,OAAOC,SAAUF,MCwC1BG,E,kDAxCb,aAAc,IAAD,8BACX,gBAiBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SAjBxC,EAAKC,MAAQ,CACXb,WAAY,GACZU,UAAW,IAJF,E,gEAQQ,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAACT,WAAYkB,EAAKC,e,+BAQ1B,IAAD,EAC2BC,KAAKP,MAA/Bb,EADD,EACCA,WAAYU,EADb,EACaA,UACdW,EAAerB,EAAWsB,QAAO,SAAA7B,GAAS,OAAIA,EAAUE,KAAK4B,cAAcC,SAASd,EAAUa,kBAEpG,OAAoC,IAAjCH,KAAKP,MAAMb,WAAWyB,OAChB,uCAGL,yBAAK7B,UAAU,OACb,8CACA,kBAAC,EAAD,CAAWO,aAAciB,KAAKb,iBAC9B,kBAAC,EAAD,CAAUP,WAAYqB,S,GAlCdK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7b8661d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) => {\n    const { image, name } = props.character;\n    return(\n        <div className=\"card\">\n            <img src={image} alt={name}/>\n            <h2>{name}</h2>\n        </div>\n    )\n    \n    \n    \n}\n\nexport default Card;\n\n","import React from 'react'\nimport Card from './Card'\n\nconst Cardlist = (props) => {\n    const { characters } = props; \n    return(\n        <div className=\"wrapper\">\n            {characters.map(character => <Card character={character}/>)}\n        </div>\n    )\n    \n    \n    \n}\n\nexport default Cardlist;\n\n","import React from 'react'\n\nconst Searchbar = (props) => {\n    const { searchChange } = props;\n    return(\n        <div className=\"wrapper\">\n            <input type=\"text\" onChange={searchChange}/>\n        </div>\n    )\n    \n    \n    \n}\n\nexport default Searchbar;\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport Cardlist from './Cardlist';\nimport Searchbar from './Searchbar';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      characters: [],\n      searchbar: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://rickandmortyapi.com/api/character/')\n    .then((response) => {\n      return response.json()\n    })\n    .then(data => { \n      this.setState({characters: data.results}) \n    });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchbar: event.target.value });\n  }\n\n  render() {\n    const { characters, searchbar } = this.state;\n    const filteredChar = characters.filter(character => character.name.toLowerCase().includes(searchbar.toLowerCase()));\n\n    if(this.state.characters.length === 0) {\n      return <h1>Loading</h1>\n    }else{\n      return (\n        <div className=\"App\">\n          <h1>Rick and Morty</h1>\n          <Searchbar searchChange={this.onSearchChange}/>\n          <Cardlist characters={filteredChar}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}